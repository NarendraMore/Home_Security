{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UserDataComponent = class UserDataComponent {\n  constructor(fb, router, service) {\n    this.fb = fb;\n    this.router = router;\n    this.service = service;\n    this.userDataArray = [];\n    this.searchText = '';\n    this.p = 1;\n    this.selectedUserId = null;\n    this.imagePreview = null;\n    this.editRegisterForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.service.getuserData().subscribe(userData => {\n      this.userDataArray = userData;\n    });\n  }\n  filteredData() {\n    if (!this.searchText) {\n      return this.userDataArray;\n    }\n    return this.userDataArray.filter(item => Object.values(item).some(val => val.toString().toLowerCase().includes(this.searchText.toLowerCase())));\n  }\n  editUser(userId) {\n    this.selectedUserId = userId;\n    const user = this.userDataArray.find(u => u._id === userId);\n    if (user) {\n      this.editRegisterForm.patchValue({\n        name: user.name,\n        email: user.email,\n        country_code: '',\n        password: user.password,\n        mobile: user.mobile,\n        backup_contact: user.backup_contact,\n        security_contact: user.security_contact,\n        role: user.role,\n        image: user.image // Keep this for form control\n      });\n      // If the user has an image, set it for preview\n      this.imagePreview = user.image ? `data:image/*;base64,${user.image}` : null;\n    }\n  }\n  onImageUpload(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n        this.editRegisterForm.patchValue({\n          image: file\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  registerUser() {\n    if (this.selectedUserId) {\n      const updatedData = this.editRegisterForm.value;\n      this.service.updateUser(this.selectedUserId, updatedData).subscribe(response => {\n        alert('User updated successfully.');\n        this.ngOnInit(); // Refresh data\n      }, error => {\n        alert('Failed to update user.');\n        console.error(error);\n      });\n    }\n  }\n  deleteUser(userId) {\n    const isConfirmed = confirm('Are you sure you want to delete this user?');\n    if (isConfirmed) {\n      this.service.deleteUser(userId).subscribe(() => {\n        alert('User deleted successfully.');\n        console.log('User deleted successfully.');\n        this.ngOnInit(); // Refresh data after deletion\n      }, error => {\n        alert('Failed to delete the user. Please try again.');\n        console.error('Error deleting user:', error);\n      });\n    } else {\n      console.log('User deletion cancelled.');\n    }\n  }\n};\nUserDataComponent = __decorate([Component({\n  selector: 'app-user-data',\n  templateUrl: './user-data.component.html',\n  styleUrls: ['./user-data.component.css']\n})], UserDataComponent);\nexport { UserDataComponent };","map":{"version":3,"names":["Component","Validators","UserDataComponent","constructor","fb","router","service","userDataArray","searchText","p","selectedUserId","imagePreview","editRegisterForm","group","name","required","email","password","country_code","mobile","backup_contact","security_contact","role","image","ngOnInit","getuserData","subscribe","userData","filteredData","filter","item","Object","values","some","val","toString","toLowerCase","includes","editUser","userId","user","find","u","_id","patchValue","onImageUpload","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","registerUser","updatedData","value","updateUser","response","alert","error","console","deleteUser","isConfirmed","confirm","log","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\components\\user-data\\user-data.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ServiceService } from 'src/app/service/service.service';\n\nexport interface userdata {\n  name: string;\n  mobile: string;\n  email: string;\n  _id: string;\n  role: string;\n  backup_contact: string;\n  security_contact: string;\n  user_id: any;\n  password:any;\n  image:any\n}\n@Component({\n  selector: 'app-user-data',\n  templateUrl: './user-data.component.html',\n  styleUrls: ['./user-data.component.css'],\n})\nexport class UserDataComponent implements OnInit {\n  userDataArray: userdata[] = [];\n  editRegisterForm!: FormGroup;\n  searchText: string = '';\n  p: number = 1;\n  selectedUserId: string | null = null;\n  imagePreview: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private service: ServiceService\n  ) {\n    this.editRegisterForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['',Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    this.service.getuserData().subscribe((userData: any) => {\n      this.userDataArray = userData;\n    });\n  }\n\n  filteredData() {\n    if (!this.searchText) {\n      return this.userDataArray;\n    }\n    return this.userDataArray.filter((item) =>\n      Object.values(item).some((val) =>\n        val.toString().toLowerCase().includes(this.searchText.toLowerCase())\n      )\n    );\n  }\n\n  editUser(userId: string) {\n    this.selectedUserId = userId;\n    const user = this.userDataArray.find((u) => u._id === userId);\n    if (user) {\n      this.editRegisterForm.patchValue({\n        name: user.name,\n        email: user.email,\n        country_code: '', // Update if necessary\n        password: user.password, // Add if applicable\n        mobile: user.mobile,\n        backup_contact: user.backup_contact,\n        security_contact: user.security_contact,\n        role: user.role,\n        image: user.image, // Keep this for form control\n      });\n  \n      // If the user has an image, set it for preview\n      this.imagePreview = user.image ? `data:image/*;base64,${user.image}` : null;\n    }\n  }\n  \n\n  onImageUpload(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result as string;\n        this.editRegisterForm.patchValue({ image: file });\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n\n  registerUser() {\n    if (this.selectedUserId) {\n      const updatedData = this.editRegisterForm.value;\n      this.service.updateUser(this.selectedUserId, updatedData).subscribe(\n        (response) => {\n          alert('User updated successfully.');\n          this.ngOnInit(); // Refresh data\n        },\n        (error) => {\n          alert('Failed to update user.');\n          console.error(error);\n        }\n      );\n    }\n  }\n  deleteUser(userId: any) {\n    const isConfirmed = confirm('Are you sure you want to delete this user?');\n    if (isConfirmed) {\n      this.service.deleteUser(userId).subscribe(\n        () => {\n          alert('User deleted successfully.');\n          console.log('User deleted successfully.');\n          this.ngOnInit(); // Refresh data after deletion\n        },\n        (error) => {\n          alert('Failed to delete the user. Please try again.');\n          console.error('Error deleting user:', error);\n        }\n      );\n    } else {\n      console.log('User deletion cancelled.');\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}