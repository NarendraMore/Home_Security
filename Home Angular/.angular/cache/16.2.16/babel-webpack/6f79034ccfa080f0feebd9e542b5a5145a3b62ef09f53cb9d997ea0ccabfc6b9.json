{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(router, fb, service, authService) {\n    this.router = router;\n    this.fb = fb;\n    this.service = service;\n    this.authService = authService;\n    this.imagePreview = null;\n    this.uploadedImage = null;\n    this.toastVisible = false; // Control the visibility of the toast\n    this.toastMessage = ''; // Server message to be shown in the toast\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  // Login functionality\n  login() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    const formData = this.loginForm.value;\n    this.authService.login(formData).subscribe(response => {\n      const token = response.token;\n      const role = response.userDetails.role;\n      // Save token and role\n      this.authService.setToken(token);\n      this.authService.setRole(role);\n      // Display success message\n      this.toastMessage = 'Login successful!';\n      this.showToast();\n      // Redirect based on the role\n      if (role === 'Admin') {\n        this.router.navigate(['/sidebar/dashboard']);\n      } else if (role === 'Client') {\n        this.router.navigate(['/sidebar/dashboard']);\n      }\n    }, error => {\n      this.toastMessage = 'Login failed. Please try again.';\n      this.showToast();\n    });\n  }\n  // Handle image upload for user registration\n  onImageUpload(event) {\n    const fileInput = event.target;\n    if (fileInput.files && fileInput.files.length > 0) {\n      this.uploadedImage = fileInput.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n      reader.readAsDataURL(this.uploadedImage);\n    }\n  }\n  // Register a new user (with image upload)\n  registerUser() {\n    if (!this.uploadedImage) {\n      console.error('Image file is missing');\n      return;\n    }\n    const formData = new FormData();\n    Object.keys(this.registerForm.value).forEach(key => {\n      formData.append(key, this.registerForm.value[key]);\n    });\n    formData.append('image', this.uploadedImage);\n    this.service.registerNewuser(formData).subscribe(response => {\n      this.toastMessage = 'Registration successful!';\n      this.showToast();\n      this.registerForm.reset();\n      this.imagePreview = null;\n    }, error => {\n      this.toastMessage = 'Registration failed. Please try again.';\n      this.showToast();\n    });\n  }\n  // Show toast\n  showToast() {\n    this.toastVisible = true;\n    setTimeout(() => {\n      this.toastVisible = false;\n    }, 3000); // Hide after 3 seconds\n  }\n};\n\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"names":["Component","Validators","LoginPageComponent","constructor","router","fb","service","authService","imagePreview","uploadedImage","toastVisible","toastMessage","loginForm","group","email","required","password","registerForm","name","country_code","mobile","backup_contact","security_contact","role","image","ngOnInit","login","invalid","formData","value","subscribe","response","token","userDetails","setToken","setRole","showToast","navigate","error","onImageUpload","event","fileInput","target","files","length","reader","FileReader","onload","result","readAsDataURL","registerUser","console","FormData","Object","keys","forEach","key","append","registerNewuser","reset","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\login\\login-page\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { ServiceService } from 'src/app/service/service.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  loginForm!: FormGroup;\n  registerForm!: FormGroup;\n  imagePreview: string | ArrayBuffer | null = null;\n  uploadedImage: File | null = null;\n  toastVisible = false; // Control the visibility of the toast\n  toastMessage = ''; // Server message to be shown in the toast\n\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    private service: ServiceService,\n    private authService: AuthService\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  ngOnInit() {}\n\n  // Login functionality\n  login(): void {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    const formData = this.loginForm.value;\n    this.authService.login(formData).subscribe(\n      (response: any) => {\n        const token = response.token;\n        const role = response.userDetails.role;\n\n        // Save token and role\n        this.authService.setToken(token);\n        this.authService.setRole(role);\n\n        // Display success message\n        this.toastMessage = 'Login successful!';\n        this.showToast();\n\n        // Redirect based on the role\n        if (role === 'Admin') {\n          this.router.navigate(['/sidebar/dashboard']);\n        } else if (role === 'Client') {\n          this.router.navigate(['/sidebar/dashboard']);\n        }\n      },\n      (error) => {\n        this.toastMessage = 'Login failed. Please try again.';\n        this.showToast();\n      }\n    );\n  }\n\n  // Handle image upload for user registration\n  onImageUpload(event: Event) {\n    const fileInput = event.target as HTMLInputElement;\n    if (fileInput.files && fileInput.files.length > 0) {\n      this.uploadedImage = fileInput.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n      reader.readAsDataURL(this.uploadedImage);\n    }\n  }\n\n  // Register a new user (with image upload)\n  registerUser() {\n    if (!this.uploadedImage) {\n      console.error('Image file is missing');\n      return;\n    }\n\n    const formData = new FormData();\n    Object.keys(this.registerForm.value).forEach((key) => {\n      formData.append(key, this.registerForm.value[key]);\n    });\n    formData.append('image', this.uploadedImage);\n\n    this.service.registerNewuser(formData).subscribe(\n      (response: any) => {\n        this.toastMessage = 'Registration successful!';\n        this.showToast();\n        this.registerForm.reset();\n        this.imagePreview = null;\n      },\n      (error: any) => {\n        this.toastMessage = 'Registration failed. Please try again.';\n        this.showToast();\n      }\n    );\n  }\n\n  // Show toast\n  showToast() {\n    this.toastVisible = true;\n    setTimeout(() => {\n      this.toastVisible = false;\n    }, 3000); // Hide after 3 seconds\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}