{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(router, fb, service, authService) {\n    this.router = router;\n    this.fb = fb;\n    this.service = service;\n    this.authService = authService;\n    this.imagePreview = null;\n    this.uploadedImage = null;\n    this.toastVisible = false; // Control the visibility of the toast\n    this.toastMessage = '';\n    // Initialize the login form with validation\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n    // Initialize the register form with validation\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  // Login functionality\n  login() {\n    if (this.loginForm.invalid) {\n      return; // Prevent login if form is invalid\n    }\n\n    const formData = this.loginForm.value;\n    this.authService.login(formData).subscribe(response => {\n      console.log('response', response);\n      // Assuming the response contains the JWT token and user role\n      const token = response.token;\n      const role = response.userDetails.role; // You might need to change this based on your API response format\n      // Save the token in localStorage\n      this.authService.setToken(token);\n      this.authService.setRole(role);\n      // Redirect based on role\n      if (role === 'Admin') {\n        console.log('admin role');\n        this.router.navigate(['/sidebar/dashboard']);\n      } else if (role === 'Client') {\n        console.log('client role');\n        this.router.navigate(['/sidebar/dashboard']); // Client redirection to dashboard\n      }\n    }, error => {\n      alert('Login failed. Please try again.');\n    });\n  }\n  // Handle image upload for user registration\n  onImageUpload(event) {\n    const fileInput = event.target;\n    if (fileInput.files && fileInput.files.length > 0) {\n      this.uploadedImage = fileInput.files[0];\n      // Show preview of the image\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n      reader.readAsDataURL(this.uploadedImage);\n    }\n  }\n  // Register a new user (with image upload)\n  registerUser() {\n    if (!this.uploadedImage) {\n      console.error('Image file is missing');\n      return;\n    }\n    const formData = new FormData();\n    // Append form fields\n    Object.keys(this.registerForm.value).forEach(key => {\n      formData.append(key, this.registerForm.value[key]);\n    });\n    // Append image\n    formData.append('image', this.uploadedImage);\n    this.service.registerNewuser(formData).subscribe(response => {\n      console.log('Response:', response);\n      this.registerForm.reset();\n      this.imagePreview = null;\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"names":["Component","Validators","LoginPageComponent","constructor","router","fb","service","authService","imagePreview","uploadedImage","toastVisible","toastMessage","loginForm","group","email","required","password","registerForm","name","country_code","mobile","backup_contact","security_contact","role","image","ngOnInit","login","invalid","formData","value","subscribe","response","console","log","token","userDetails","setToken","setRole","navigate","error","alert","onImageUpload","event","fileInput","target","files","length","reader","FileReader","onload","result","readAsDataURL","registerUser","FormData","Object","keys","forEach","key","append","registerNewuser","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\login\\login-page\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { ServiceService } from 'src/app/service/service.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  loginForm!: FormGroup;\n  registerForm!: FormGroup;\n  imagePreview: string | ArrayBuffer | null = null;\n  uploadedImage: File | null = null;\n  toastVisible = false; // Control the visibility of the toast\n  toastMessage = '';\n  constructor(\n    private router: Router,\n    private fb: FormBuilder,\n    private service: ServiceService,\n    private authService: AuthService\n  ) {\n    // Initialize the login form with validation\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n\n    // Initialize the register form with validation\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      country_code: ['', Validators.required],\n      mobile: ['', Validators.required],\n      backup_contact: ['', Validators.required],\n      security_contact: ['', Validators.required],\n      role: ['', Validators.required],\n      image: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {}\n\n  // Login functionality\n  login(): void {\n    if (this.loginForm.invalid) {\n      return; // Prevent login if form is invalid\n    }\n\n    const formData = this.loginForm.value;\n    this.authService.login(formData).subscribe(\n      (response: any) => {\n        console.log('response',response);\n        \n        // Assuming the response contains the JWT token and user role\n        const token = response.token;\n        const role = response.userDetails.role; // You might need to change this based on your API response format\n\n        // Save the token in localStorage\n        this.authService.setToken(token);\n        this.authService.setRole(role);\n\n        // Redirect based on role\n        if (role === 'Admin') {\n          console.log('admin role');\n          \n          this.router.navigate(['/sidebar/dashboard']);\n        } else if (role === 'Client') {\n          console.log('client role');\n          this.router.navigate(['/sidebar/dashboard']); // Client redirection to dashboard\n        }\n      },\n      (error) => {\n        alert('Login failed. Please try again.');\n      }\n    );\n  }\n\n  // Handle image upload for user registration\n  onImageUpload(event: Event) {\n    const fileInput = event.target as HTMLInputElement;\n    if (fileInput.files && fileInput.files.length > 0) {\n      this.uploadedImage = fileInput.files[0];\n\n      // Show preview of the image\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n      reader.readAsDataURL(this.uploadedImage);\n    }\n  }\n\n  // Register a new user (with image upload)\n  registerUser() {\n    if (!this.uploadedImage) {\n      console.error('Image file is missing');\n      return;\n    }\n\n    const formData = new FormData();\n    // Append form fields\n    Object.keys(this.registerForm.value).forEach((key) => {\n      formData.append(key, this.registerForm.value[key]);\n    });\n\n    // Append image\n    formData.append('image', this.uploadedImage);\n\n    this.service.registerNewuser(formData).subscribe(\n      (response: any) => {\n        console.log('Response:', response);\n        this.registerForm.reset();\n        this.imagePreview = null;\n      },\n      (error: any) => {\n        console.error('Error:', error);\n      }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}