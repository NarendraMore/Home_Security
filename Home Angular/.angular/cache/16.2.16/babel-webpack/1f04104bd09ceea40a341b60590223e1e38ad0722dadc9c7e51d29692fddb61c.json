{"ast":null,"code":"import { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(loginData) {\n    return this.http.post(`${environment.url}/login`, loginData);\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return token != null;\n  }\n  getUserRole() {\n    const token = this.getToken();\n    if (token) {\n      const decoded = JSON.parse(atob(token.split('.')[1])); // Decode JWT token\n      return decoded.role;\n    }\n    return null;\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["environment","AuthService","constructor","http","login","loginData","post","url","setToken","token","localStorage","setItem","getToken","getItem","isAuthenticated","getUserRole","decoded","JSON","parse","atob","split","role","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\service\\auth.service.ts"],"sourcesContent":["// auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environment/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(loginData: any): Observable<any> {\n    return this.http.post(`${environment.url}/login`, loginData);\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    return token != null;\n  }\n\n  getUserRole(): string | null {\n    const token = this.getToken();\n    if (token) {\n      const decoded = JSON.parse(atob(token.split('.')[1])); // Decode JWT token\n      return decoded.role;\n    }\n    return null;\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n  }\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,6BAA6B;;;AAGzD,MAGaC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,KAAKA,CAACC,SAAc;IAClB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGN,WAAW,CAACO,GAAG,QAAQ,EAAEF,SAAS,CAAC;EAC9D;EAEAG,QAAQA,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,eAAeA,CAAA;IACb,MAAML,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,OAAOH,KAAK,IAAI,IAAI;EACtB;EAEAM,WAAWA,CAAA;IACT,MAAMN,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAIH,KAAK,EAAE;MACT,MAAMO,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACV,KAAK,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvD,OAAOJ,OAAO,CAACK,IAAI;;IAErB,OAAO,IAAI;EACb;EAEAC,MAAMA,CAAA;IACJZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;EAClC;;;uBAhCWtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX1B,WAAW;MAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEP7B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}