{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  // Login method to authenticate the user\n  // login(credentials: any) {\n  //   return this.http.post(`${environment.url}/login`, credentials);\n  // }\n  // Set the JWT token in localStorage\n  setToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  // Set the user role in localStorage\n  setRole(role) {\n    localStorage.setItem('user_role', role);\n  }\n  // Get the stored JWT token\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  // Get the stored user role\n  getUserRole() {\n    return localStorage.getItem('user_role');\n  }\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  // Remove token and role on logout\n  logout() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_role');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","http","setToken","token","localStorage","setItem","setRole","role","getToken","getItem","getUserRole","isAuthenticated","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  // Login method to authenticate the user\n  // login(credentials: any) {\n  //   return this.http.post(`${environment.url}/login`, credentials);\n  // }\n\n  // Set the JWT token in localStorage\n  setToken(token: string) {\n    localStorage.setItem('auth_token', token);\n  }\n\n  // Set the user role in localStorage\n  setRole(role: string) {\n    localStorage.setItem('user_role', role);\n  }\n\n  // Get the stored JWT token\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n\n  // Get the stored user role\n  getUserRole() {\n    return localStorage.getItem('user_role');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n\n  // Remove token and role on logout\n  logout() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_role');\n  }\n}\n"],"mappings":";;AAIA,MAGaA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;EACA;EACA;EACA;EAEA;EACAC,QAAQA,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,KAAK,CAAC;EAC3C;EAEA;EACAG,OAAOA,CAACC,IAAY;IAClBH,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEE,IAAI,CAAC;EACzC;EAEA;EACAC,QAAQA,CAAA;IACN,OAAOJ,YAAY,CAACK,OAAO,CAAC,YAAY,CAAC;EAC3C;EAEA;EACAC,WAAWA,CAAA;IACT,OAAON,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC;EAC1C;EAEA;EACAE,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACH,QAAQ,EAAE;EAC1B;EAEA;EACAI,MAAMA,CAAA;IACJR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;IACrCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;EACtC;;;uBAtCWd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlB,WAAW;MAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPrB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}