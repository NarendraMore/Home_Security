{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet SidebarComponent = class SidebarComponent {\n  constructor(router, authService, webSocketService) {\n    this.router = router;\n    this.authService = authService;\n    this.webSocketService = webSocketService;\n    this.incidentDataArray = [];\n    this.searchText = '';\n    this.p = 1;\n    this.isNotificationOpen = false;\n    this.notifications = [];\n    this.notificationCount = 0;\n    this.showNotificationPreview = false;\n    this.selectedNotification = null;\n    this.selectedNotificationIndex = null;\n    this.notificationSound = new Audio('assets/sounds/notification.mp3');\n  }\n  ngOnInit() {\n    // Subscribe to the WebSocket event to get notifications\n    this.webSocketService.listenForNotifications().subscribe(message => {\n      console.log('New Notification:', message);\n      this.notifications.push(message); // Add new notification to the array\n    });\n  }\n\n  onclickLogout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n  displayUser() {\n    this.router.navigate(['/sidebar/user']);\n  }\n  dispalyCameraAdd() {\n    this.router.navigate(['/sidebar/camera']);\n  }\n  displayDashbord() {\n    this.router.navigate(['/sidebar/dashboard']);\n  }\n  toggleNotification() {\n    this.isNotificationOpen = !this.isNotificationOpen;\n  }\n  showPreview(notification, index) {\n    this.selectedNotification = notification;\n    this.selectedNotificationIndex = index;\n    this.showNotificationPreview = true;\n  }\n  closePreview() {\n    if (this.selectedNotificationIndex !== null) {\n      this.notifications.splice(this.selectedNotificationIndex, 1);\n      this.notificationCount = this.notifications.length;\n      this.selectedNotification = null;\n      this.selectedNotificationIndex = null;\n      this.showNotificationPreview = false;\n    }\n  }\n  playNotificationSound() {\n    this.notificationSound.load();\n    this.notificationSound.play().catch(err => {\n      console.error('Failed to play notification sound:', err);\n    });\n  }\n};\nSidebarComponent = __decorate([Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css']\n})], SidebarComponent);\nexport { SidebarComponent };","map":{"version":3,"names":["Component","SidebarComponent","constructor","router","authService","webSocketService","incidentDataArray","searchText","p","isNotificationOpen","notifications","notificationCount","showNotificationPreview","selectedNotification","selectedNotificationIndex","notificationSound","Audio","ngOnInit","listenForNotifications","subscribe","message","console","log","push","onclickLogout","logout","navigate","displayUser","dispalyCameraAdd","displayDashbord","toggleNotification","showPreview","notification","index","closePreview","splice","length","playNotificationSound","load","play","catch","err","error","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\components\\sidebar\\sidebar.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { WebSocketService } from 'src/app/service/websocket.service';\r\n\r\nexport interface IncidentData {\r\n  incident_type: string;\r\n  time: string;\r\n  date: string;\r\n  _id: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css'],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  incidentDataArray: IncidentData[] = [];\r\n  searchText: string = '';\r\n  p: number = 1;\r\n  isNotificationOpen = false;\r\n  notifications: string[] = [];\r\n  notificationCount = 0;\r\n  showNotificationPreview = false;\r\n  selectedNotification: string | null = null;\r\n  selectedNotificationIndex: number | null = null;\r\n\r\n  private notificationSound = new Audio('assets/sounds/notification.mp3');\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private webSocketService: WebSocketService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to the WebSocket event to get notifications\r\n    this.webSocketService.listenForNotifications().subscribe((message: string) => {\r\n      console.log('New Notification:', message);\r\n      this.notifications.push(message);  // Add new notification to the array\r\n    });\r\n  }\r\n\r\n  onclickLogout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  displayUser(): void {\r\n    this.router.navigate(['/sidebar/user']);\r\n  }\r\n\r\n  dispalyCameraAdd(): void {\r\n    this.router.navigate(['/sidebar/camera']);\r\n  }\r\n\r\n  displayDashbord(): void {\r\n    this.router.navigate(['/sidebar/dashboard']);\r\n  }\r\n\r\n  toggleNotification(): void {\r\n    this.isNotificationOpen = !this.isNotificationOpen;\r\n  }\r\n\r\n  showPreview(notification: string, index: number): void {\r\n    this.selectedNotification = notification;\r\n    this.selectedNotificationIndex = index;\r\n    this.showNotificationPreview = true;\r\n  }\r\n\r\n  closePreview(): void {\r\n    if (this.selectedNotificationIndex !== null) {\r\n      this.notifications.splice(this.selectedNotificationIndex, 1);\r\n      this.notificationCount = this.notifications.length;\r\n      this.selectedNotification = null;\r\n      this.selectedNotificationIndex = null;\r\n      this.showNotificationPreview = false;\r\n    }\r\n  }\r\n\r\n  private playNotificationSound(): void {\r\n    this.notificationSound.load();\r\n    this.notificationSound.play().catch((err) => {\r\n      console.error('Failed to play notification sound:', err);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}