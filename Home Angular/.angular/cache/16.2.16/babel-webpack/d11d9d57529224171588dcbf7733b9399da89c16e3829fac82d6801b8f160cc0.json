{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (this.authService.isAuthenticated()) {\n      const userRole = this.authService.getUserRole();\n      const requiredRole = next.data['role'];\n      if (userRole && (userRole === requiredRole || requiredRole === 'Any')) {\n        return true;\n      } else {\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","next","state","isAuthenticated","userRole","getUserRole","requiredRole","data","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\Narendra\\Home-Security\\Home_angular\\src\\app\\service\\auth.guard.ts"],"sourcesContent":["// auth.guard.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      const userRole = this.authService.getUserRole();\r\n      const requiredRole = next.data['role'];\r\n\r\n      if (userRole && (userRole === requiredRole || requiredRole === 'Any')) {\r\n        return true;\r\n      } else {\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      }\r\n    }\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":";;;AAKA,MAGaA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtC,MAAMC,QAAQ,GAAG,IAAI,CAACN,WAAW,CAACO,WAAW,EAAE;MAC/C,MAAMC,YAAY,GAAGL,IAAI,CAACM,IAAI,CAAC,MAAM,CAAC;MAEtC,IAAIH,QAAQ,KAAKA,QAAQ,KAAKE,YAAY,IAAIA,YAAY,KAAK,KAAK,CAAC,EAAE;QACrE,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACP,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;;IAGhB,IAAI,CAACT,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;;uBArBWZ,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATlB,SAAS;MAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEPrB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}